# Define the deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: '#{NAMESPACE}#'
  name: '#{API_IMAGENAME}#'
spec:
  replicas: #{Replicas}#
  selector:
    matchLabels:
      app: '#{API_IMAGENAME}#'
  template:
    metadata:
      labels:
        app: '#{API_IMAGENAME}#'
    spec:
      containers:
      - name: '#{API_IMAGENAME}#'
        image: '#{ACRNAME}#.azurecr.io/#{API_IMAGENAME}#:#{Build.SourceBranchName}#-#{Build.BuildId}#'
        env:
          - name: ASPNETCORE_ENVIRONMENT
            value: '#{ASPNETCORE_ENVIRONMENT}#'
          - name: Config__SwaggerBasePath
            value: '#{BASEPATH}#'
          - name: ApplicationInsights__InstrumentationKey
            valueFrom:
              secretKeyRef:
                key: #{NAMESPACE}#-secrets
                name: ApplicationInsights__InstrumentationKey
          - name: ApplicationInsights__ApplicationId
            valueFrom:
              secretKeyRef:
                key: #{NAMESPACE}#-secrets
                name: ApplicationInsights__ApplicationId
          - name: ApplicationInsights__ApiKey
            valueFrom:
              secretKeyRef:
                key: #{NAMESPACE}#-secrets
                name: ApplicationInsights__ApiKey
          - name: Config__RedisConnectionString
            valueFrom:
              secretKeyRef:
                key: #{NAMESPACE}#-secrets
                name: Config__RedisConnectionString
        ports:
        - containerPort: 80
          name:  "http-port"
        readinessProbe:
          httpGet:
            path: /
            port: "http-port"
          initialDelaySeconds: 10
      imagePullSecrets:
        - name: '#{ACRNAME}#'

# Define secret
---
apiVersion: v1
kind: Secret
metadata:
  namespace: #{NAMESPACE}#
  name: #{NAMESPACE}#-secrets
type: Opaque
stringData:
  config.yaml: |-
    ApplicationInsights__InstrumentationKey: '#{InstrumentationKey}#'
    ApplicationInsights__ApplicationId: '#{ApplicationInsightsApplicationId}#'
    ApplicationInsights__ApiKey: '#{ApplicationInsightsApiKey}#'
    Config__RedisConnectionString: '#{RedisConnectionString}#'

# Define the service to forward to above deployment
---
apiVersion: v1
kind: Service
metadata:
  namespace: '#{NAMESPACE}#'
  name: '#{API_IMAGENAME}#'
spec:
  selector:
    app: '#{API_IMAGENAME}#'
  ports:
  - name: "http-port"
    protocol: "TCP"
    port: 80

# Define the ingress
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: '#{NAMESPACE}#'
  name: '#{NAMESPACE}#-ingress'
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
spec:
  rules:
  - host: #{HOST}#
    http:
      paths:
      - path: #{BASEPATH}#/?(.*)
        backend:
          serviceName: #{API_IMAGENAME}#
          servicePort: "http-port"

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: '#{NAMESPACE}#'
  name: '#{NAMESPACE}#-alive-ingress'
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
  - host: #{HOST}#
    http:
      paths:
      - path: /alive#{BASEPATH}#
        backend:
          serviceName: #{API_IMAGENAME}#
          servicePort: "http-port"